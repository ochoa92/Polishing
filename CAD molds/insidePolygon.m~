function [inside] = insidePolygon(Vertices, Points)
    % Computes the points inside a Polygon
    %
    % INPUTS: 
    % - Vertices: polygon vertices (Vx,Vy) 2D vector; 
    % - Points: points to be verified (X,Y) 2D vector.
    %
    % OUTPUTS:
    % - inside: binary mask of the points inside 0:out and 1:in 
    
    Vx = Vertices(:,1);
    Vy = Vertices(:,2);
    X = Points(:,1);
    Y = Points(:,2);
    
    nVertices = length(Vertices);
    nPoints = length(Points);
%     for n=1:nPoints       
        for i=1:(nVertices-1)
            
            % i is the index of the first vertex, j is the next one.
            j = i + 1;
            
            % The vertices of the edge we are checking.
            Vx0 = Vx(i);
            Vy0 = Vy(i);
            Vx1 = Vx(j);
            Vy1 = Vy(j);
            
            % Check whether the edge intersects a line from (-inf,y) to (x,y).
            % First check if the line crosses the horizontal line at y in either direction.
            if ( (Vy0 <= Y) && (Vy1 > Y) || (Vy1 <= Y) && (Vy0 > Y) )
                % If so, get the point where it crosses that line. This is a simple solution
                % to a linear equation. Note that we can't get a division by zero here -
                % if yp1 == yp0 then the above if be false.
                cross = (Vx1 - Vx0) * (Y - Vy0) / (Vy1 - Vy0) + Vx0;

                % Finally check if it crosses to the left of our test point. You could equally
                % do right and it should give the same result.
                if (cross < X)
                    inside = 1;
                end
                
            end
                       
        end
        inside = 1
%     end
 
    
end
    
    
% -------------------------------------------------------------------------------
% C++ Algorithm    
% The following code returns 1 for interior points and 0 for exterior points.    
% bool pnpoly(const Eigen::MatrixX2d &poly, float x, float y)
% {
%     // If we never cross any lines we're inside.
%     bool inside = false;
% 
%     // Loop through all the edges.
%     for (int i = 0; i < poly.rows(); ++i)
%     {
%         // i is the index of the first vertex, j is the next one.
%         // The original code uses a too-clever trick for this.
%         int j = (i + 1) % poly.rows();
% 
%         // The vertices of the edge we are checking.
%         double xp0 = poly(i, 0);
%         double yp0 = poly(i, 1);
%         double xp1 = poly(j, 0);
%         double yp1 = poly(j, 1);
% 
%         // Check whether the edge intersects a line from (-inf,y) to (x,y).
% 
%         // First check if the line crosses the horizontal line at y in either direction.
%         if ((yp0 <= y) && (yp1 > y) || (yp1 <= y) && (yp0 > y))
%         {
%             // If so, get the point where it crosses that line. This is a simple solution
%             // to a linear equation. Note that we can't get a division by zero here -
%             // if yp1 == yp0 then the above if be false.
%             double cross = (xp1 - xp0) * (y - yp0) / (yp1 - yp0) + xp0;
% 
%             // Finally check if it crosses to the left of our test point. You could equally
%             // do right and it should give the same result.
%             if (cross < x)
%                 inside = !inside;
%         }
%     }
%     return inside;
% }    
% -------------------------------------------------------------------------------
% int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
% {
%   int i, j, c = 0;
%   for (i = 0, j = nvert-1; i < nvert; j = i++) {
%     if ( ((verty[i]>testy) != (verty[j]>testy)) &&
% 	 (testx < (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) )
%        c = !c;
%   }
%   return c;
% } 
% -------------------------------------------------------------------------------
    
